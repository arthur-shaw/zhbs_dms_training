---
format: 
    revealjs:
        theme: [default, ../css/core.scss, ../css/colors.scss]
        height: 900
        width: 1600
execute: 
  eval: false
  echo: false
---

```{r}

```

```{r}
#| label: define reactable theme
#| eval: true
#| echo: false
s2_theme = reactable::reactableTheme(
    headerStyle = list(
        color = "white",
        background = "var(--s2)"
    )
) 
```

```{r}
#| label: define functions for creating interview__key
#| eval: true
#| echo: false

#' Add leading zero to 2-digit number
#' 
#' @param x Numeric. Two-digit number to give padding
#' 
#' @importFrom stringr str_pad
pad_num <- function(x) {
    stringr::str_pad(
        string = x,
        width = 2,
        pad = 0
    )
}

#' Create valid, fake `interview__key`
#' 
#' @return Character. Valid, fake `interview__id` of form XX-XX-XX-XX
#' @importFrom glue glue
create_key <- function() {

    # draw 4 random integers between 0 and 99
    nums <- sample(
        x = 0:99,
        size = 4,
        replace = TRUE
    )
    
    # construct key like XX-XX-XX-XX, where XX is a number with leading zero
    key <- glue::glue("{pad_num(nums[1])}-{pad_num(nums[2])}-{pad_num(nums[3])}-{pad_num(nums[4])}")

    return(key)

}

#' Create N valid, fake `interview__key` values
#' 
#' @param n Numeric. Number of `interview__key` values to return
#' 
#' @return Character vector. Composed of valid `interview__key` values.
#' 
#' @importFrom purrr map_chr
create_keys <- function(n) {

    purrr::map_chr(
        .x = seq(1, n),
        .f = ~ create_key()
    )

}
 
```

# Usage `r fontawesome::fa(name = "keyboard")`  {background-color=var(--suso)}

## Overview {.suso}

:::: {.columns}

::: {.column width="50%"}

### [First, before starting `r fontawesome::fa(name = "hand-point-up")`]{.txt-s}

::: {.box .box-1}
Open the project `r fontawesome::fa(name = "r-project")`
:::

:::

::: {.column width="50%"}

:::

::::

## Overview {.suso}

:::: {.columns}

::: {.column width="50%"}

### [First, before starting `r fontawesome::fa(name = "hand-point-up")`]{.txt-s}

::: {.box .box-1}
Open the project `r fontawesome::fa(name = "r-project")`
:::

:::

::: {.column width="50%"}

### [Then, choose `r fontawesome::fa(name = "signs-post")`]{.txt-s}

::: {.box .box-2}
Check recall data `r fontawesome::fa(name = "list-check")`
:::

::: {.box .box-3}
Get diary data `r fontawesome::fa(name = "cloud-arrow-down")`
:::


:::

::::


# Open the project `r fontawesome::fa(name = "r-project")` {background-color=var(--s1)}

## Method 1: Double-click `zhbs_dms.Rproj` {.t1}

:::: {.columns}

::: {.column width="70%"}

![](assets/open_from_proj_file.mp4){fig-align="center"}

:::

::: {.column width="30%"}

1.  Open your file explorer
2.  Navigate to the folder containing `zhbs_dms.Rproj`
3.  Double-click on the file
4.  Wait for RStudio to open the project

:::

::::

## Method 2: Open within RStudio {.t1}

:::: {.columns}

::: {.column width="70%"}

![](assets/open_proj_inside_rstudio.mp4){fig-align="center"}

:::

::: {.column width="30%"}

1.  Open RStudio
2.  Click on `Project: (None)` in the upper right-hand corner
3.  Select the project, by either
  - Selecting the project from the drop-down menu (if previously opened)
  - Opening the project file

:::

::::

# Check recall data `r fontawesome::fa(name = "list-check")` {background-color=var(--s2)}

## Run the script {.t2}

:::: {.columns}

::: {.column width="70%"}

![](assets/run_check_issues.mp4){fig-align="center"}

:::

::: {.column width="30%"}

- <details>
  <summary>Open the `run_check_issues.R` file</summary>
  - Move to the `Files` tab in RStudio
  - Click on `run_check_issues.R`
</details>
- <details>
  <summary>Open the `run_check_issues.R` file</summary>
  - Move to the script editor pane where `run_check_issues.R` is open
  - Click on the `Source` button in the upper righthand corner
</details>
- Wait for the script to complete

:::

::::

## Review the results {.t2}

:::: {.columns}

::: {.column width="70%"}

![](assets/find_hbs_results.mp4){fig-align="center"}

:::

::: {.column width="30%"}

- Data: `01_get_data/data/hbs/02_combined/`
- Output: `03_check_issues/output/`

:::

::::

## Understanding data {.t2}


```{.text echo=true}
├── 00_resource
├── 01_downloaded
├── 02_combined
└── 03_derived
```

## Understanding data {.t2}

:::: {.columns}

::: {.column width="70%"}

```{.text code-line-numbers="1"}
├── 00_resource
├── 01_downloaded
├── 02_combined
└── 03_derived
```

:::

::: {.column width="30%"}

- **Resource.** Auxiliary data for checks (e.g., conversion factors).

:::

::::

## Understanding data {.t2}

:::: {.columns}

::: {.column width="70%"}

```{.text code-line-numbers="2"}
├── 00_resource
├── 01_downloaded
├── 02_combined
└── 03_derived
```

:::

::: {.column width="30%"}

- **Resource.** Auxiliary data for checks (e.g., conversion factors).
- **Downloaded.** One per CAPI version: zip file and folder of unzipped data files.

:::

::::

## Understanding data {.t2}

:::: {.columns}

::: {.column width="70%"}

```{.text code-line-numbers="3"}
├── 00_resource
├── 01_downloaded
├── 02_combined
└── 03_derived
```

:::

::: {.column width="30%"}

- **Resource.** Auxiliary data for checks (e.g., conversion factors).
- **Downloaded.** One per CAPI version: zip file and folder of unzipped data files.
- **Combined.** One set of files that "concatenates" data from all CAPI versions.

:::

::::

## Understanding data {.t2}

:::: {.columns}

::: {.column width="70%"}

```{.text code-line-numbers="4"}
├── 00_resource
├── 01_downloaded
├── 02_combined
└── 03_derived
```

:::

::: {.column width="30%"}

- **Resource.** Auxiliary data for checks (e.g., conversion factors).
- **Downloaded.** One per CAPI version: zip file and folder of unzipped data files.
- **Combined.** One set of files that "concatenates" data from all CAPI versions.
- **Constructed.** Rosters split in CAPI are combined in data. Var names harmonized.

:::

::::

## Understanding output {.t2}

::: {.box .box-2}
Folder
:::

::: {.box .box-2}
Files
:::

::: {.box .box-2}
Contents
:::

# Folder {background-color=var(--s2)}

## How to get there {.t2}

```{.text code-line-numbers="3"}
+-- 01_get_data
+-- 03_check_issues
|   +-- output
|   +-- R
+-- get_diary_data.R
+-- R
+-- README.md
+-- README.Rmd
+-- run_check_issues.R
+-- setup.R
\-- zhbs_dms.Rproj
```

# Files {background-color=var(--s2)}

## What's there {.t2}

```{.text code-line-numbers="3-15"}
+-- 03_check_issues
|   \-- output
|       +-- attributes.dta
|       +-- attributes.xlsx
|       +-- issues.dta
|       +-- issues.xlsx
|       +-- to_reject_ids.dta
|       +-- to_reject_issues.dta
|       +-- to_reject_api.dta
|       +-- to_review_ids.dta
|       +-- to_review_issues.dta
|       +-- to_review_api.dta
|       +-- to_review_ids.dta
|       +-- to_review_issues.dta
|       +-- to_review_api.dta
|   +-- R
```

## To reject {.t2}

```{.text code-line-numbers="7-9"}
+-- 03_check_issues
|   \-- output
|       +-- attributes.dta
|       +-- attributes.xlsx
|       +-- issues.dta
|       +-- issues.xlsx
|       +-- to_reject_ids.dta
|       +-- to_reject_issues.dta
|       +-- to_reject_api.dta
|       +-- to_review_ids.dta
|       +-- to_review_issues.dta
|       +-- to_review_api.dta
|       +-- to_review_ids.dta
|       +-- to_review_issues.dta
|       +-- to_review_api.dta
|   +-- R
```

## To review {.t2}

```{.text code-line-numbers="10-12"}
+-- 03_check_issues
|   \-- output
|       +-- attributes.dta
|       +-- attributes.xlsx
|       +-- issues.dta
|       +-- issues.xlsx
|       +-- to_reject_ids.dta
|       +-- to_reject_issues.dta
|       +-- to_reject_api.dta
|       +-- to_review_ids.dta
|       +-- to_review_issues.dta
|       +-- to_review_api.dta
|       +-- to_review_ids.dta
|       +-- to_review_issues.dta
|       +-- to_review_api.dta
|   +-- R
```

## To follow up {.t2}

```{.text code-line-numbers="13-15"}
+-- 03_check_issues
|   \-- output
|       +-- attributes.dta
|       +-- attributes.xlsx
|       +-- issues.dta
|       +-- issues.xlsx
|       +-- to_reject_ids.dta
|       +-- to_reject_issues.dta
|       +-- to_reject_api.dta
|       +-- to_review_ids.dta
|       +-- to_review_issues.dta
|       +-- to_review_api.dta
|       +-- to_review_ids.dta
|       +-- to_review_issues.dta
|       +-- to_review_api.dta
|   +-- R
```

# Contents {background-color=var(--s2)}

## Three types of files {.t2}

::: {.box .box-2}
`*_api`
:::

::: {.box .box-2}
`*_issues`
:::

::: {.box .box-2}
`*_ids`
:::

## `*_api`: What to send the API {.t2}

```{r}
#| label: API files
#| eval: true
#| echo: false
df_api <- data.frame(
  interview__id = uuid::UUIDgenerate(n = 4),
  reject_comment = c(
    "ERROR: Problem 1\nERROR: Problem 2",
    "ERROR: Problem 1",
    "ERROR: Problem 3\nERROR: Problem 4",
    "ERROR: Problem 5"
  ),
  interview__status = c(100, 120, 100, 100)
)

api_tbl <- reactable::reactable(
  data = df_api,
  striped = TRUE,
  columns = list(
    interview__id = reactable::colDef(minWidth = 325),
    reject_comment = reactable::colDef(minWidth = 200),
    interview__status = reactable::colDef(minWidth = 150)
  ),
  theme = s2_theme
)

api_tbl
```

## `*_issues`: What issues found {.t2}

```{r}
#| label: issues files
#| eval: true
#| echo: false
df_issues <- df_api |>
  dplyr::mutate(
    interview__key = create_keys(n = 4),
    issue_type = 1,
    issue_comment = reject_comment,
    issue_loc = ""
  ) |>
  tidyr::separate_longer_delim(
    cols = issue_comment,
    delim = stringr::regex(pattern = "\\nERROR")
  ) |>
  dplyr::mutate(
    issue_desc = stringr::str_remove(
      string = issue_comment,
      pattern = stringr::fixed("ERROR: ")
    ),
    issue_vars = dplyr::case_when(
      issue_desc == "Problem 2" ~ "v2a",
      issue_desc == "Problem 1" ~ "v1",
      issue_desc == "Problem 3" ~ "v23",
      issue_desc == "Problem 3" ~ "v1[0-2]",
      TRUE ~ ""
    ),
    dplyr::across(
      .cols = c(issue_desc, issue_comment),
      .fns = ~ stringr::str_replace(
        string = .x,
        pattern = "(?<!ERROR): ",
        replacement = ""
      )
    )
  ) |>
  dplyr::select(
    interview__id, interview__key, interview__status,
    issue_desc, issue_comment, issue_loc
  )

issues_tbl <- reactable::reactable(
  data = df_issues,
  striped = TRUE,
  columns = list(
    interview__id = reactable::colDef(minWidth = 325),
    interview__key = reactable::colDef(minWidth = 125),
    # interview__status = reactable::colDef(minWidth = 50),
    # issue_desc = reactable::colDef(minWidth = 100),
    issue_comment = reactable::colDef(minWidth = 200)
    # issue_loc = reactable::colDef(minWidth = 50)
  ),
  theme = s2_theme
)

issues_tbl
```

## `*_ids`: Which IDs have issues {.t2}

```{r}
#| label: ids
#| eval: true
#| echo: false
df_ids <- df_api |>
  dplyr::mutate(
    interview__id = create_keys(n = 4)
  )

df_ids <- df_issues |>
  dplyr::distinct(interview__id, .keep_all = TRUE) |>
  dplyr::select(interview__id, interview__key, interview__status)

ids_tbl <- reactable::reactable(
  data = df_ids,
  columns = list(
    interview__id = reactable::colDef(minWidth = 325),
    interview__key = reactable::colDef(minWidth = 125),
    interview__status = reactable::colDef(minWidth = 150)
  ),
  theme = s2_theme
)

ids_tbl
```

# Get diary data `r fontawesome::fa(name = "cloud-arrow-down")` {background-color=var(--s3)}

## Run the script {.t3}

:::: {.columns}

::: {.column width="70%"}

TODO: add video

NOTE: process highly similar to that for recall

:::

::: {.column width="30%" .scrollable}

- <details>
  <summary>Open the `get_diary_data.R` file</summary>
  - Move to the `Files` tab in RStudio
  - Click on `get_diary_data.R`
</details>
- <details>
  <summary>Source the `get_diary_data.R` file</summary>
  - Move to the script editor pane where `get_diary_data.R` is open
  - Click on the `Source` button in the upper righthand corner
</details>
- Wait for execution to complete

:::

::::

## Find the data {.t3}

:::: {.columns}

::: {.column width="70%"}

TODO: add video

NOTE: process is highly similar to that for recall

:::

::: {.column width="30%"}

Navigate to `01_get_data/data/drb/02_combined/`

:::

::::